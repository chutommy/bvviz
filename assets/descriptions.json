{
  "style_hide_header": "<style> header {visibility: hidden} </style>",
  "style_hide_footer": "<style> footer {visibility: hidden;} </style>",
  "style_hide_view_fullscreen": "<style> button[title='View fullscreen'] {visibility: hidden} </style>",
  "err_secret_str_length": "The length of the secret string ({str_len}) cannot be zero or cannot exceed the number of qubits in the backend simulator minus one ({qu_num} - 1).",
  "err_secret_str_value": "The secret string must be composed solely of binary digits, i.e., 0s and 1s.",
  "info_wait_compute": "Please wait while the experiment is in progress. The process may take some time to complete.",
  "info_wait_render": "Rendering data visualizations...",
  "warn_failure": "The execution has failed because of invalid configuration settings. Please make sure that all the values are valid and fully compatible with the selected backend before proceeding to the next step.",
  "text_introduction": "Welcome to my web application for visualizing the :violet[Bernstein-Vazirani] algorithm! This application aims to provide a user-friendly interface for those who are interested in learning more about quantum computing and its limitations.\n\nThe :violet[Bernstein-Vazirani] algorithm is a fundamental quantum algorithm that serves as an excellent example to showcase the potential benefits and downfalls of quantum computing. My goal is to provide users with a simple yet informative way to understand quantum informatics by visualizing the results of the Bernstein-Vazirani algorithm. I hope that this visualization can be used as a valuable resource for those who are new to quantum computing and want to gain a deeper understanding of its capabilities and limitations.",
  "text_bv_explanation": "",
  "text_disclaimer": "This web application was designed and developed by a quantum computing enthusiast, and while I strive to provide accurate information, keep in mind that the information presented here is for educational purposes only. Since the visualizations may potentially be misleading, this application should not be solely relied upon as a factual source, and users should conduct their own research. I hope that this application can serve as a useful resource for those who are interested in learning more about quantum computing, and I welcome any feedback or suggestions for improvement.",
  "text_disclaimer_results": "Please note that while the visualization you've seen allowed for higher error rates, the :violet[Bernstein-Vazirani] protocol itself has been shown to be relatively robust to errors, even with noisy intermediate-scale quantum (NISQ) devices. However, it should be emphasized that the protocol relies on a relatively small number of gates, and even with significantly lower error rates, the differences in the results can still show that quantum computations on a large scale remain unreliable. As quantum computing technology continues to develop, efforts are being made to address these issues and improve the reliability of large-scale quantum computations.",
  "text_circuit_layout": "This is the circuit layout transpiled for the target backend. It visually depicts the physical qubits employed and their interconnections, offering essential insights into the mapping of the quantum circuit onto the hardware. This representation provides significant information for comprehending the physical implementation of the quantum algorithm.\n\nBy analyzing the layout, it is possible to acquire insights into the quantum circuit's performance on the target hardware, as well as the potential for optimization or further refinement. In essence, the layout presents a significant asset for comprehending and portraying the intricate interactions between the quantum circuit and the underlying hardware.",
  "text_error_map": "The error map is a useful tool for characterizing the error behavior of a quantum computing backend. It provides a graphical representation of the error rates associated with each qubit and gate, enabling users to identify areas of the hardware that are more susceptible to errors. By analyzing the error map, users can optimize their configuration settings and make informed decisions regarding the design and execution of their quantum circuits. The error rates are depicted using a color gradient, with brighter colors indicating higher error rates.\n\nNote that the error map presented in this context is based on the default configuration of the backend and may vary depending on the user's selected configuration settings. ",
  "text_quantum_circuit": "The plot exhibits a horizontal representation of the qubits, with the corresponding gates or operations arranged vertically at their respective positions along the lines. The arrangement of the gates signifies their sequential application in the circuit, and the gate type is denoted by its label, shape, and color.",
  "text_measurements": "The counts chart provides a graphical representation of the statistical distribution of measurement outcomes obtained from a quantum algorithm experiment. The chart consists of a series of bars, where the height of each bar represents the frequency of occurrence of a specific measurement result. The total area under the bars corresponds to the total number of measurements performed, providing valuable insights into the overall performance of the experiment.\n\nThe counts chart is an effective tool for analyzing and interpreting experimental data, allowing users to identify patterns and trends in the distribution of measurement outcomes. Furthermore, it can be used to compare and evaluate the results of different experiments, enabling researchers to optimize experimental parameters and refine their quantum algorithms.",
  "text_error_rate": "The pie chart provides a visual representation of the distribution of outcomes obtained during the experiment, indicating the proportion of correct and incorrect measurements.\n\nIt's important to note that even if the proportion of correct measurements is relatively low, it doesn't necessarily mean that the targeted value is unattainable. This is because the correct measurements correspond to a single value, whereas the incorrect measurements are spread out across many possible values.\n\nThe bar chart adjacent to the pie chart displays the frequency of incorrect measured bits within the incorrect measurements.",
  "help_quantum_system": "Select a quantum simulator backend for the experiment. The number displayed alongside each backend name denotes the maximum number of qubits that can be simulated by the respective simulator.",
  "help_shots": "Enter the number of times you would like to execute the circuit. Increasing the number of shots can lead to more accurate statistical results, but may also increase the computational time required to run the experiment.",
  "help_simulator_seed": "Specify a seed value to control the sampling process of the quantum simulator. This ensures reproducibility of the results and allows for comparison between different experiments.",
  "help_secret_str": "Enter a secret string consisting of 0s and 1s to be used in the :violet[Bernstein-Vazirani] algorithm. The length of the string must not exceed the number of qubits in the backend simulator minus one, as one qubit is reserved for the ancilla qubit.",
  "help_reset_err": "Enter the error rate for qubit reset operation. This parameter specifies the probability that a qubit will fail to be reset to its initial state.",
  "help_measurement_err": "Enter the error rate for the measurement operation. This value represents the probability of obtaining an incorrect measurement outcome after performing a measurement on a single qubit.",
  "help_single_gate_err": "Specify the error rate for single-qubit gates, which models the probability of error during the execution of single-qubit gate operations such as the Pauli-X (X) and Hadamard (H) gates.",
  "help_double_gate_err": "Specify the error rate for two-qubit gates, which models the probability of error during the execution of a two-qubit gate operation (CNOT).",
  "help_layout_method": "Choose a layout method for the transpiler to map the circuit qubits to physical qubits on the quantum hardware.",
  "help_routing_method": "Choose a routing method for the transpiler to optimize the qubit connections and minimize the errors introduced during the circuit execution.",
  "help_translation_method": "Choose a translation method for the transpiler to convert the circuit instructions into the instructions compatible with the selected backend.",
  "help_optimization_level": "Select an optimization level for the transpiler to optimize the circuit's performance by reducing the number of gates, reducing the circuit depth, or minimizing the number of SWAP gates required for qubit mapping. The higher the optimization level, the more aggressive the optimization process, which can lead to faster execution time but may also affect the circuit's accuracy.",
  "help_approximation_degree": "Specify an approximation degree for the transpiler to approximate the circuit's gates using a lower number of gates, reducing the circuit's overall complexity.",
  "help_transpiler_seed": "Specify a seed value to control the transpiling process of the quantum simulator. This ensures reproducibility of the results and allows for comparison between different experiments.",
  "help_classical_solution": "The solution obtained by the classical algorithm which was computed using classical computation methods.",
  "help_classical_instructions": "This refers to the number of byte instructions used in the classical solution of the algorithm. Byte instructions are low-level instructions that are executed by the computer's processor, and are typically represented in binary form.",
  "help_classical_time": "Time it took the solver to obtain the solution using classical approach.",
  "help_classical_queries_count": "Number of queries made to the classical oracle.",
  "help_quantum_solution": "The solution obtained by the quantum circuit which was computed using quantum computation methods",
  "help_quantum_shots": "",
  "help_quantum_time": "",
  "help_quantum_queries_count": "",
  "help_cl_bits": "The number of classical bits used in the quantum circuit to store and process classical information. These bits are used to control the quantum operations and obtain measurement results.",
  "help_qu_bits": "The number of qubits used in the quantum circuit.",
  "help_qu_gates": "The number of elementary operations or quantum gates that were used in the experiment to implement the desired computation.",
  "help_qu_bits_cap": "The maximum number of qubits that can be used in a single experiment on this quantum computing device",
  "help_correct_rate": "",
  "help_confidence_ratio": "",
  "help_error_rate_norm": "",
  "help_error_rate_total": "",
  "help_openqasm": "Download the OpenQASM code for the circuit used in the experiment.",
  "help_measurement_csv": "Download measurements of the experiment as a CSV file. The file will contain raw data from the experiment, including the binary outcome of each measurement in the order in which they were taken. The file is saved in a comma-separated value format and can be imported into spreadsheet or analysis software for further processing or visualization.",
  "help_counts_json": "Download the counts of the experiment as a JSON file. The file will contain raw data, including the counts of each measured state. Consider using this data for further analysis or visualization."
}